package sort;

class BubbleSort
{
    private int ops;

    public BubbleSort()
    {
      ops = 0;
    }

    void bubbleSort(double my_data[])
    {
        int n = my_data.length;
        double temp;
        ops += 2;
        
        for (int i = 0; i < n - 1; i++)
        {
        	ops += 4;
            for (int j = 0; j < n - i - 1; j++)
            {
            	ops+=5;
            	
                if (my_data[j] > my_data[j+1])
                {
                    // swap temp and my_data[i]
                    temp = my_data[j];
                    my_data[j] = my_data[j+1];
                    my_data[j+1] = temp;
                    ops += 5;
                }
                
                ops+=1;
            }
        }
    }

    public int get_ops()
    {
      return ops;
    }
}

class InsertionSort
{
    private int ops;

    public InsertionSort()
    {
      ops = 0;
    }

    public int get_ops()
    {
      return ops;
    }
    // Function to sort array using insertion sort
    void sort(double my_data[])
    {
        int n = my_data.length;
        ops += 1;
        
        for (int i=1; i<n; ++i)
        {
            double key = my_data[i];
            int j = i-1;
            ops += 6;

            // Move elements of my_data[0..i-1], that are
            // greater than key, to one position ahead
            // of their current position 
            while (j>=0 && my_data[j] > key)
            {
                my_data[j+1] = my_data[j];
                j = j-1;
                ops += 7;
            }
            my_data[j+1] = key;
            ops += 2;
        }
    }
}

class ShellSort
{
    private int ops;

    public ShellSort()
    {
      ops = 0;
    }

    public int get_ops()
    {
      return ops;
    }

    void sort(double my_data[])
    {
      int n = my_data.length;
      ops+=1;
      // Start with a big gap, then reduce the gap
      for (int gap = n/2; gap > 0; gap /= 2)
      {
    	  ops+=4;
          for (int i = gap; i < n; i += 1)
          {
              double temp = my_data[i];
              ops+=4;
              // shift earlier gap-sorted elements up until the correct location
              // for a[i] is found
              int j;
              for (j = i; j >= gap && my_data[j - gap] > temp; j -= gap)
              {
	        	  my_data[j] = my_data[j - gap];
	        	  ops+=8;
              }

              my_data[j] = temp;
              ops+=1;
          }
      }
    }
}

class MergeSort
{
    private int ops;

    public MergeSort()
    {
      ops = 0;
    }

    public int get_ops()
    {
      return ops;
    }
    // Merges two subarrays of my_data[].
    // First subarray is my_data[left..mid]
    // Second subarray is my_data[mid+1..right]
    void merge(double my_data[], int left, int mid, int right)
    {
        // Find sizes of two subarrays to be merged
        int n1 = mid - left + 1;
        int n2 = right- mid;

        // Create temp arrays 
        double L[] = new double [n1];
        double R[] = new double [n2];
        ops+=7;
        
        //Copy data to temp arrays
        for (int i=0; i<n1; i++)
        {
        	L[i] = my_data[left + i];
        	ops+=5;
        }
        
        for (int i=0; i<n2; i++)
        {
    		R[i] = my_data[mid + 1 + i];
    		ops+=6;
        }

        // Merge the temp arrays

        // Initial indexes of first and second subarrays
        int i = 0;
        int j = 0;

        // Initial index of merged subarry array
        int k = left;
        ops+=3;
        
        while (i < n1 && j < n2)
        {
        	ops+=3;
            if (L[i] <= R[j])
            {
                my_data[k] = L[i];
                i++;
                ops+=2;
            }
            else
            {
                my_data[k] = R[j];
                j++;
                ops+=2;
            }
            k++;
            ops+=2;
        }

        // Copy remaining elements of L[] if any 
        while (i < n1)
        {
            my_data[k] = L[i];
            i++;
            k++;
            ops+=4;
        }

        // Copy remaining elements of R[] if any 
        while (j < n2)
        {
            my_data[k] = R[j];
            j++;
            k++;
            ops+=4;
        }
    }

    // Main function that sorts my_data[l..r] using
    // merge()
    public void sort(double my_data[], int left, int right)
    {
        if (left < right)
        {
            // Find the middle point
            int mid = (left + right)/2;
            // Sort first and second halves
            sort(my_data, left, mid);
            sort(my_data, mid+1, right);

            // Merge the sorted halves
            merge(my_data, left, mid, right);
        }
        ops+=1;
    }
}


class QuickSort
{
    private int ops;
    public QuickSort()
    {
      ops =0;
    }

    public int get_ops()
    {
      return ops;
    }
    // This function takes last element as pivot,
    // places the pivot element at its correct
    // position in sorted array, and places all
    // smaller (smaller than pivot) to left of
    // pivot and all greater elements to right
    // of pivot 
    int partition(double my_data[], int low, int high)
    {
        double pivot = my_data[high];
        int i = (low-1); // index of smaller element
        ops+= 3;
        
        for (int j=low; j<high; j++)
        {	
            // If current element is smaller than or
            // equal to pivot
            if (my_data[j] <= pivot)
            {
                i++;

                // swap my_data[i] and my_data[j]
                double temp = my_data[i];
                my_data[i] = my_data[j];
                my_data[j] = temp;
                ops+=4;
            }
            ops+= 4;
        }

        // swap my_data[i+1] and my_data[high] (or pivot)
        double temp = my_data[i+1];
        my_data[i+1] = my_data[high];
        my_data[high] = temp; 
        ops+=6;
        return i+1;
       
    }


    // The main function that implements QuickSort()
    // my_data[] --> Array to be sorted,
    // low  --> Starting index,
    // high  --> Ending index 
    public void sort(double my_data[], int low, int high)
    {
        if (low < high)
        {
            // pivot is partitioning index, my_data[pivot] is
            // now at right place 
            int pivot = partition(my_data, low, high);
            // Recursively sort elements before
            // partition and after partition
            sort(my_data, low, pivot-1);
            sort(my_data, pivot+1, high);
            ops+=3;
        }
        ops+=1;
    }
}
